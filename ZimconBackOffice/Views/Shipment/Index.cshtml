@model ZimconBackOffice.Controllers.ShipmentVehicleViewModel

@{
    ViewBag.Title = "Shipment";
}

<div class="row">
    <div class="col-md-8">
        <div class="card card-map">
        <div class="header">
            <h4 class="title">Shipment</h4>
        </div>
        <div class="map">
            <div id="map"></div>
        </div>
    </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="header">
                <h4 class="title"><i class="fa fa-cubes"></i> Add New Shipment</h4>
            </div>
            <div class="content">
                <form>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Consignee</label>
                                <select class="form-control" id="consigneeSelector">
                                    @foreach (var consignee in Model.Consignees)
                                    {
                                        if (consignee.address != null){
                                            <option value="@consignee.id">@consignee.name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Vehicle</label>
                                <select class="form-control" id="vehicleSelector">
                                    @foreach (var vehicle in Model.Vehicles)
                                    {
                                       <option value="@vehicle.id">@vehicle.model - @vehicle.licenseId</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Departure Address</label>
                                <input type="text" id="address" class="form-control border-input"></input>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Destination Address</label>
                                <input type="text" id="search_location" class="form-control border-input"></input>
                            </div>
                        </div>
                    </div>

                    <div class="pull-left">
                        <button type="button" class="btn btn-info btn-fill btn-wd" id="submitShipment">Submit</button>
                    </div>
                    <div class="clearfix"></div>
                </form>
            </div>
        </div>
    </div>
</div>
<!--<script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyDJTEHW57RdhCXwM6xLcFsmcSeK9ldaGUQ&sensor=false&libraries=places&language=en-AU"></script>
<script type="text/javascript">
    function initMap() {
        var autocomplete = new google.maps.places.Autocomplete($("#address")[0], {});
        var geocoder = new google.maps.Geocoder();
        var map = new google.maps.Map(document.getElementById('map'));

        google.maps.event.addListener(autocomplete, 'place_changed', function() {
            var place = autocomplete.getPlace();
            console.log(place.formatted_address);
            var placesAddress = place.formatted_address;
            geocodeAddress(geocoder,placesAddress,map);
        });
    }

    function geocodeAddress(geocoder,address,resultsMap) {                
        geocoder.geocode({'address': address}, function(results, status) {
          if (status === 'OK') {
            resultsMap.setCenter(results[0].geometry.location);
            var marker = new google.maps.Marker({ 
              map: resultsMap,
              position: results[0].geometry.location
            });
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
    }
</script>
<!--<script asyc defer src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDJTEHW57RdhCXwM6xLcFsmcSeK9ldaGUQ&callback=initMap"></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyDJTEHW57RdhCXwM6xLcFsmcSeK9ldaGUQ&libraries=places&language=en-AU"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDJTEHW57RdhCXwM6xLcFsmcSeK9ldaGUQ&callback=initMap"></script>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=places​&sensor=false"></scr‌​ipt>-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyDJTEHW57RdhCXwM6xLcFsmcSeK9ldaGUQ&libraries=places&language=en-AU"></script>
<script type="text/javascript">
var geocoder;
var map;
var marker;

/*
 * Google Map with marker
 */
function initialize() {
    console.log('in init');
    var latlng = new google.maps.LatLng(-26.2221409,28.0733135); //default cooordinates of Zimcon ...
    var options = {
        zoom: 16,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(document.getElementById("map"), options);

    geocoder = new google.maps.Geocoder();

    marker = new google.maps.Marker({
        map: map,
        draggable: true,
        position: latlng
    });

    google.maps.event.addListener(marker, "dragend", function () {
        var point = marker.getPosition();
        map.panTo(point);
        geocoder.geocode({'latLng': marker.getPosition()}, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                marker.setPosition(results[0].geometry.location);
                console.log(results[0].formatted_address);
                    console.log(marker.getPosition().lat());
                    console.log(marker.getPosition().lng());
            }
        });
    });

}

$(document).ready(function () {
    //load google map
    initialize();
    
    /*
     * autocomplete location search
     */
    var PostCodeid = '#search_location';
    $(function () {
        $('#search_location').autocomplete({
            source: function (request, response) {
                geocoder.geocode({
                    'address': request.term
                }, function (results, status) {
                    response($.map(results, function (item) {
                        return {
                            label: item.formatted_address,
                            value: item.formatted_address,
                            lat: item.geometry.location.lat(),
                            lon: item.geometry.location.lng()
                        };
                    }));
                });
            },
            select: function (event, ui) {
                console.log(ui.item.value);
                console.log(ui.item.lat);
                console.log(ui.item.lon);
                var latlng = new google.maps.LatLng(ui.item.lat, ui.item.lon);
                marker.setPosition(latlng);
                initialize();
            }
        });
    });
    
    /*
     * Point location on google map
     */
    $('.get_map').click(function (e) {
        var address = $(PostCodeid).val();
        geocoder.geocode({'address': address}, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                marker.setPosition(results[0].geometry.location);
                    console.log(results[0].formatted_address);
                    console.log(marker.getPosition().lat());
                    console.log(marker.getPosition().lng());
            } else {
                alert("Geocode was not successful for the following reason: " + status);
            }
        });
        e.preventDefault();
    });

    //Add listener to marker for reverse geocoding
    google.maps.event.addListener(marker, 'drag', function () {
        geocoder.geocode({'latLng': marker.getPosition()}, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                if (results[0]) {
                    console.log(results[0].formatted_address);
                    console.log(marker.getPosition().lat());
                    console.log(marker.getPosition().lng());
                }
            }
        });
    });
});
</script>

